import discord
from discord.ext import commands, tasks
import os
from random import choice
import random
import json
import asyncio
import pytz
from datetime import datetime


class Whitelist(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def BMU(self, ctx, amount):
        
        if ctx.author.id in whitelisted :
            await ctx.send(f'welcome {ctx.author.name}')
        else:
            await ctx.send('Im sorry but your not a white listed user')
            return    

        await open_account(ctx.author)

        users = await get_bank_data()

        user = ctx.author


        await ctx.send(f"Okay {ctx.author.name} I gave {amount} to your bank")


        users[str(user.id)]["bank"] += int(amount)
        

        with open("mainbank.json", "w") as f:
            json.dump(users, f)   

        message = (f'{ctx.author.name} added {amount} coins to their account')
        await auditory(message)    
        
    @commands.command()
    async def Spam(self, ctx, num, *, words):
        if ctx.author.id in whitelisted :
            await ctx.send(f'welcome {ctx.author.name}')
        else:
            await ctx.send('Im sorry but your not a white listed user')
            return
        num = int(num)
        
        script = f"{ctx.author.name} spammed '{words}' {num} times"
        auditory(script)
        
        for i in range(num):

            await ctx.send(f'No.{i} {words}')  


def setup(bot):
    bot.add_cog(Whitelist(bot))   
    print('Whitelist is loaded')  

#               Ghost              Zeus                Racc                UltraXerm           Bumblebee           Shaun
whitelisted = ['Your ID's']

async def auditory(message):
    timestamp = datetime.now()
    file1 = open("audit.txt","a") 
    # \n is placed to indicate EOL (End of Line) 
    
    L = ['_________\n', f'{message}\n', f'{timestamp}\n', '_______\n']
    file1.writelines(L) 
    file1.close() #to change file access modes

async def open_account(user):

    users = await get_bank_data()
    
    with open("mainbank.json", "r") as f:
        users = json.load(f)
    
    if str(user.id) in users:
        return False
    
    else:
        users[str(user.id)] = {}
        users[str(user.id)]["wallet"] = 0 
        users[str(user.id)]["bank"] = 0 

    with open("mainbank.json", "w") as f:
        json.dump(users, f)
    return True

async def get_bank_data():
    with open("mainbank.json", "r") as f:
        users = json.load(f)

    return users 

async def update_bank(user, change = 0, mode = "wallet"):
